// Generated by CoffeeScript 1.8.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  jQuery(function($) {
    var FilterView, FilteringView, PostsEditor;
    FilterView = (function(_super) {
      __extends(FilterView, _super);

      function FilterView() {
        this.onAddClick = __bind(this.onAddClick, this);
        this.initialize = __bind(this.initialize, this);
        return FilterView.__super__.constructor.apply(this, arguments);
      }

      FilterView.prototype.initialize = function(params) {
        FilterView.__super__.initialize.call(this, params);
        this.template = params.template;
        this.addButton = this.$el.find('button.add');
        this.addButton.on('click', this.onAddClick);
        this.list = this.$el.find('ul');
        return this.$el.find('button.remove').on('click', function() {
          $(this).closest('li').remove();
          return false;
        });
      };

      FilterView.prototype.onAddClick = function(event) {
        event.preventDefault();
        return this.template.clone().appendTo(this.list).find('button').on('click', function() {
          $(this).closest('li').remove();
          return false;
        });
      };

      return FilterView;

    })(wp.media.View);
    FilteringView = (function(_super) {
      __extends(FilteringView, _super);

      function FilteringView() {
        this.initialize = __bind(this.initialize, this);
        return FilteringView.__super__.constructor.apply(this, arguments);
      }

      FilteringView.prototype.el = $('#post-settings');

      FilteringView.prototype.initialize = function() {
        return FilteringView.__super__.initialize.apply(this, arguments);
      };

      return FilteringView;

    })(wp.media.View);
    return window.asgRegisteredSourceEditors.posts = PostsEditor = (function(_super) {
      __extends(PostsEditor, _super);

      function PostsEditor(editor) {
        PostsEditor.__super__.constructor.call(this, editor);
        new FilterView({
          el: $('#posts-taxonomy-filters'),
          template: $('#posts-taxonomy-filter-template li')
        });
        new FilterView({
          el: $('#posts-custom-field-filters'),
          template: $('#posts-custom-field-filter-template li')
        });
      }

      return PostsEditor;

    })(window.asgSourceEditor);
  });

}).call(this);
