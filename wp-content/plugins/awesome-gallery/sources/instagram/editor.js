// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  jQuery(function() {
    var $, AuthorizeView, CheckAuthView, CheckDataView, CopyKeysView, InstagramEditor, InstagramModel, _ref, _ref1, _ref2, _ref3, _ref4;
    $ = jQuery;
    InstagramModel = (function(_super) {
      __extends(InstagramModel, _super);

      function InstagramModel() {
        this.validate = __bind(this.validate, this);
        _ref = InstagramModel.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      InstagramModel.prototype.validate = function() {
        if (!this.get('client_id')) {
          return 'Please enter Instagram client ID';
        }
        if (!this.get('client_secret')) {
          return 'Please enter Instagram client secret';
        }
        if (this.get('feed_type') === 'other-user' && !this.get('other_user_login')) {
          return 'Please enter other user\'s login';
        }
      };

      return InstagramModel;

    })(Backbone.Model);
    CopyKeysView = (function(_super) {
      __extends(CopyKeysView, _super);

      function CopyKeysView() {
        this.initialize = __bind(this.initialize, this);
        _ref1 = CopyKeysView.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      CopyKeysView.prototype.el = $('#instagram-copy-keys-block');

      CopyKeysView.prototype.initialize = function(params) {
        CopyKeysView.__super__.initialize.call(this, params);
        return rivets.bind(this.el, {
          model: this.model
        }).publish();
      };

      return CopyKeysView;

    })(Backbone.View);
    AuthorizeView = (function(_super) {
      __extends(AuthorizeView, _super);

      function AuthorizeView() {
        this.authorize = __bind(this.authorize, this);
        this.initialize = __bind(this.initialize, this);
        _ref2 = AuthorizeView.__super__.constructor.apply(this, arguments);
        return _ref2;
      }

      AuthorizeView.prototype.el = $('#instagram-authorize-block');

      AuthorizeView.prototype.events = {
        'click #instagram-authorize': 'authorize'
      };

      AuthorizeView.prototype.initialize = function(params) {
        AuthorizeView.__super__.initialize.call(this, params);
        this.redirect_uri = $('#instagram-redirect-uri').text();
        return rivets.bind(this.el, {
          model: this.model
        }).publish();
      };

      AuthorizeView.prototype.authorize = function(event) {
        var error, href;
        event.preventDefault();
        if (error = this.model.validate()) {
          alert(error);
          return;
        }
        href = "https://api.instagram.com/oauth/authorize/?client_id=" + (this.model.get('client_id')) + "&response_type=code&redirect_uri=" + (encodeURIComponent(this.redirect_uri));
        href = "admin.php?action=asg_instagram_save_client_data&" + $.param(this.model.toJSON()) + "&redirect=" + encodeURIComponent(href);
        return window.open(href);
      };

      return AuthorizeView;

    })(Backbone.View);
    CheckAuthView = (function(_super) {
      __extends(CheckAuthView, _super);

      function CheckAuthView() {
        this.checkAuth = __bind(this.checkAuth, this);
        this.initialize = __bind(this.initialize, this);
        _ref3 = CheckAuthView.__super__.constructor.apply(this, arguments);
        return _ref3;
      }

      CheckAuthView.prototype.el = $('#instagram-check-auth-block');

      CheckAuthView.prototype.events = {
        'click #instagram-check-auth': 'checkAuth'
      };

      CheckAuthView.prototype.initialize = function() {
        this.$auth_spinner = this.$('.spinner');
        return this.$auth_result = this.$('#instagram-auth-result');
      };

      CheckAuthView.prototype.checkAuth = function(event) {
        var data, error,
          _this = this;
        if (event) {
          event.preventDefault();
        }
        if (error = this.model.validate()) {
          alert(error);
          return;
        }
        this.$auth_spinner.css('display', 'inline-block');
        data = this.model.toJSON();
        return $.post('admin-ajax.php', {
          action: 'asg_instagram_ping',
          data: data
        }, function(response) {
          _this.$auth_spinner.css('display', 'none');
          if (response === 'OK') {
            return _this.$auth_result.text('Valid').addClass('asg-valid').removeClass('asg-invalid');
          } else {
            return _this.$auth_result.text('Invalid').addClass('asg-invalid').removeClass('asg-valid');
          }
        });
      };

      return CheckAuthView;

    })(Backbone.View);
    CheckDataView = (function(_super) {
      __extends(CheckDataView, _super);

      function CheckDataView() {
        this.checkData = __bind(this.checkData, this);
        this.initialize = __bind(this.initialize, this);
        _ref4 = CheckDataView.__super__.constructor.apply(this, arguments);
        return _ref4;
      }

      CheckDataView.prototype.el = $('#instagram-check-data-block');

      CheckDataView.prototype.events = {
        'click #instagram-check-data': 'checkData'
      };

      CheckDataView.prototype.initialize = function() {
        var _this = this;
        CheckDataView.__super__.initialize.apply(this, arguments);
        this.$data_spinner = this.$('.spinner');
        this.$other_user_wrapper = this.$('#instagram-other-user-wrapper');
        this.$hashtag_wrapper = this.$('#instagram-hashtag-wrapper');
        this.listenTo(this.model, 'change:feed_type', function() {
          if (_this.model.get('feed_type') === 'other-user') {
            _this.$other_user_wrapper.show();
          } else {
            _this.$other_user_wrapper.hide();
          }
          if (_this.model.get('feed_type') === 'hashtag') {
            return _this.$hashtag_wrapper.show();
          } else {
            return _this.$hashtag_wrapper.hide();
          }
        });
        return rivets.bind(this.el, {
          model: this.model
        }).publish();
      };

      CheckDataView.prototype.checkData = function(event) {
        var error,
          _this = this;
        event.preventDefault();
        if (error = this.model.validate()) {
          alert(error);
          return;
        }
        this.$data_spinner.css('display', 'inline-block');
        return $.post('admin-ajax.php', {
          action: 'asg_instagram_data_check',
          data: this.model.toJSON()
        }, function(response) {
          _this.$data_spinner.css('display', 'none');
          return alert(response);
        });
      };

      return CheckDataView;

    })(Backbone.View);
    InstagramEditor = (function(_super) {
      __extends(InstagramEditor, _super);

      function InstagramEditor(view) {
        this.link_mode_changed = __bind(this.link_mode_changed, this);
        this.other_user_changed = __bind(this.other_user_changed, this);
        InstagramEditor.__super__.constructor.call(this, view);
        this.model = new InstagramModel;
        new CopyKeysView({
          model: this.model
        });
        new AuthorizeView({
          model: this.model
        });
        this.check_auth = new CheckAuthView({
          model: this.model
        });
        new CheckDataView({
          model: this.model
        });
        new asgSettingsView({
          model: this.model,
          el: $('#instagram-settings-block')
        });
        if (this.model.isValid()) {
          this.check_auth.checkAuth();
        }
      }

      InstagramEditor.prototype.other_user_changed = function() {};

      InstagramEditor.prototype.link_mode_changed = function() {};

      return InstagramEditor;

    })(window.asgSourceEditor);
    return window.asgRegisteredSourceEditors.instagram = InstagramEditor;
  });

}).call(this);
